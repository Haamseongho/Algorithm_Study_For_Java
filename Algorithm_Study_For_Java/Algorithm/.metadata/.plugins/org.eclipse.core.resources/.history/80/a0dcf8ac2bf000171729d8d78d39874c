package makeNumberOne;

import java.util.Arrays;
import java.util.Scanner;

public class 영역만들기3 {

	static final int MAX = 100;
	static int m, n;
	static int[][] square;
	static boolean[][] visit;

public static void main(String[] args) {
		
		Scanner sc = new Scanner(System.in);
		int x1, x2, y1, y2;
		int k;
		
		m = sc.nextInt();
		n = sc.nextInt();
		k = sc.nextInt();
		square = new int[m][n];
		visit = new boolean[m][n];
		
		for (int i = 0; i < k; i++) {
			x1 = sc.nextInt();
			y1 = sc.nextInt();
			x2 = sc.nextInt();
			y2 = sc.nextInt();
			
			for (int x = x1; x < x2; x++)
				for (int y = y1; y < y2; y++)
					square[y][x] = 1;
		}
		
		int tmp, count = 0;
		int[] result = new int[MAX];
		
		for (int i = 0; i < m; i++) {
			for (int j = 0; j < n; j++) {
				if ((tmp = dfs(i, j)) > 0) {
					result[count] = tmp;
					count += 1;
				}
			}
		}
		
		Arrays.sort(result, 0, count);
		
		System.out.println(count);
		for (int i = 0; i < count; i++)
			System.out.print(result[i] + " ");
	}
	
	public static int dfs(int y, int x) {
		
		if (visit[y][x] != false || square[y][x] == 1)
			return 0;
		
		int value = 1;
		visit[y][x] = true;
		
		if (x + 1 < n && square[y][x + 1] == 0)
			value += dfs(y, x + 1);
		if (x - 1 >= 0 && square[y][x - 1] == 0)
			value += dfs(y, x - 1);
		if (y + 1 < m && square[y + 1][x] == 0)
			value += dfs(y + 1, x);
		if (y - 1 >= 0 && square[y - 1][x] == 0)
			value += dfs(y - 1, x);
	
		return value;
	}

}
