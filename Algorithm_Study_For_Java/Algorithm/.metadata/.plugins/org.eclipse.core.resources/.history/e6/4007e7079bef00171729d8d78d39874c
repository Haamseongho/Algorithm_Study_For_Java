package makeNumberOne;

import java.util.Arrays;
import java.util.Scanner;

public class 영역만들기3 {

	static int[][] box;
	static int x1, x2, y1, y2;
	static boolean visit[][];
	static int M;
	static int N;

	public static void main(String[] args) {
		// TODO Auto-generated method stub
		Scanner scan = new Scanner(System.in);
		M = scan.nextInt();
		N = scan.nextInt();
		int K = scan.nextInt();
		int temp = 0;

		for (int i = 0; i < K; i++) {
			x1 = scan.nextInt();
			y1 = scan.nextInt();
			x2 = scan.nextInt();
			y2 = scan.nextInt();
		}

		box = new int[M][N];
		visit = new boolean[M][N];

		for (int i = x1; i < x2; i++) {
			for (int j = y1; j < y2; j++) {
				box[j][i] = 1;
			}
		}
		// 색칠 되는 부분 배열로해서 값 1 주기
		int cnt = 0; // 영역의 갯수
		int result[] = new int[10];
		for (int i = 0; i < M; i++) {
			for (int j = 0; j < N; j++) {
				result[cnt] = dfs(i, j);
				if (result[cnt] > 0) {
					cnt++;
				}
			}
		}
		Arrays.sort(result, 0, cnt);
	}

	private static int dfs(int i, int j) {
		// 방문을 했으면 false 방문을 안했으면 true >> 탐색 가능
		// box2는 계속 체크하기 위함 탐색하기 위함 (배열)

		if (visit[j][i] == true) {
			return 0;
		}

		int visit2 = 1; // 처음 시작은 상자 하나의 너비 값이 1이므로 1로 둔 것입니다.
		visit[j][i] = true; // dfs 함수가 돌아갔단 것은 방문을 했단 것 (탐색)

		if ((i > 0 || visit[j][i] != false) && (i < N + 1 || visit[j][i] != false)) {
			return visit2 + dfs(j, i);
		}
		if ((j > 0 || visit[j][i] != false) && (j < M + 1 || visit[j][i] != false)) {
			return visit2 + dfs(j, i);
		}

		return visit2;

		/*
		 * 사각형 너비 만큼의 범위 또는 이미 지나온 경로일 경우 안됨! dfs함수 다시 호출 !!
		 */
	}

}
